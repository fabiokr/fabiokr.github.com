<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ansible | Fabio Kreusch]]></title>
  <link href="http://www.kreusch.com.br/blog/categories/ansible/atom.xml" rel="self"/>
  <link href="http://www.kreusch.com.br/"/>
  <updated>2013-12-08T18:31:58-02:00</updated>
  <id>http://www.kreusch.com.br/</id>
  <author>
    <name><![CDATA[Fabio Kreusch]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Manage a development machine with Ansible]]></title>
    <link href="http://www.kreusch.com.br/blog/2013/12/03/manage-a-development-machine-with-ansible/"/>
    <updated>2013-12-03T21:11:00-02:00</updated>
    <id>http://www.kreusch.com.br/blog/2013/12/03/manage-a-development-machine-with-ansible</id>
    <content type="html"><![CDATA[<p><a href="http://www.ansibleworks.com">Ansible</a> is an IT orchestration tool I've been playing with lately. Similar tools include <a href="http://www.opscode.com/chef/">Chef</a> and <a href="http://puppetlabs.com">Puppet</a>. Some cools things about Ansible is that it is open source, and you don't need anything in your target machine (it just uses an ssh connection).</p>

<p>In this quickstart, I'll build an Ansible playbook to manage a personal Ubuntu desktop.</p>

<p>First step is to install Ansible. For Ubuntu, a repository is available:</p>

<p><code>
$ sudo add-apt-repository ppa:rquillo/ansible
$ sudo apt-get update
$ sudo apt-get install ansible
</code></p>

<p>Additional installation methods can be found in <a href="http://ansibleworks.com/docs/intro_installation.html">this page</a>.</p>

<p>Now, we create a directory that will hold our playbook:</p>

<p><code>
$ mkdir my_playbook
</code></p>

<p>A playbook is the source of instructions that ansible will run when provisioning.</p>

<p><code>
$ touch playbook.yml
</code></p>

<p>Ansible expects instructions in the <code>yml</code> format. Lets populate our playbook with an initial content:</p>

<h2>```</h2>

<h1>the host in which the playbook will be run</h1>

<ul>
<li>hosts: localhost

<h1>in this example, we using a localhost, so this is needed</h1>

<p>connection: local</p>

<h1>the target user Ansible will impersonate when provisioning</h1>

<p>user: johndoe</p>

<h1>this makes all tasks run with sudo by default</h1>

<p>sudo: true</p>

<h1>additional variables</h1>

<p>vars:
  user: johndoe</p>

<h1>roles are a way to group tasks; they will run in the sequence determined here</h1>

roles:

<ul>
<li>system
```</li>
</ul>
</li>
</ul>


<p>The next step is to create an inventory file. This will hold a list of servers Ansible can run with:</p>

<p>```
$ touch inventory</p>

<p>```</p>

<p><code>
localhost   ansible_connection=local
</code></p>

<p>Now, lets create our roles. For this example, the idea is to have a <code>system</code> role that is responsible for setting up system libraries.</p>

<p><code>
$ mkdir roles
$ mkdir roles/system
</code></p>

<p>And our system main task:</p>

<p><code>
$ touch roles/system/main.yml
</code></p>

<p>And this is the content of our sytems task:</p>

<h2>```</h2>

<h1>This is a task. Basically, it needs a module command. In this example, it</h1>

<h1>also have a <code>name</code>, which will be displayed while running the task to give a</h1>

<h1>better description of the running task.</h1>

<ul>
<li>name: install

<h1>apt is our module. It installs debian packages. Here we are passing an</h1>

<h1><code></code> variable, which is the item from <code>with_items</code></h1>

apt: pkg=

<h1><code>with_items</code> will loop through a list and run the module passing each item</h1>

<h1>as <code></code></h1>

with_items:
  # better shell

<ul>
<li>zsh

<h1>terminal multiplexer</h1></li>
<li>tmux

<h1>terminal editor</h1></li>
<li>vim-gtk

<h1>shh</h1></li>
<li>ssh

<h1>ruby</h1></li>
<li>ruby

<h1>ruby dev headers</h1></li>
<li>ruby-dev

<h1>ruby package manager</h1></li>
<li>rubygems</li>
</ul>
</li>
</ul>


<h1>This is an example of how to gather information from the machine. We</h1>

<h1>run a command with the "shell" module and register the result into the</h1>

<h1>"default_shell" variable</h1>

<ul>
<li>name: zsh facts
shell: 'echo $SHELL'
register: default_shell

<h1>changed when determines when will this task be considered changed when running</h1>

<h1>ansible. In this case, we want it to always be false, as we are just</h1>

<h1>retrieving information.</h1>

<p>changed_when: False
sudo: no</p></li>
</ul>


<h1>Now, we want to set zsh as the default shell, unless it is already the default</h1>

<h1>one.</h1>

<ul>
<li>name: make zsh default
shell:  chsh -s /bin/zsh 

<h1>This task will run only when the following is true. In here, we check the</h1>

<h1>value registered previously within the "default_shell" variable.</h1>

<p>when: default_shell.stdout.find('/bin/zsh') == -1
```</p></li>
</ul>


<p>Now, to run our playbook:</p>

<p><code>
ansible-playbook -K -i inventory playbook.yml
</code></p>

<p><code>-K</code> will ask for the machine sudo password. <code>-i</code> will pass the inventory file to use.</p>

<p>For additional modules, look into the <a href="http://www.ansibleworks.com/docs/modules.html">Ansible modules documentation</a>.</p>
]]></content>
  </entry>
  
</feed>
